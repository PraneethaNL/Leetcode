### for palindromes:

check : word == word[::-1]

#### SWAP numbers:
    a=a+b
    b=a-b
    a=a-b

    or
    x=x^y  (XOR)
    y=x^y
    x=x^y


### to check given no.  n is power of any number m:

while n%m==0:
    n=n/m
return n==1

###division of negative numbers:

int(n/m) = will round of -2.33 to -2

### in binary search 
mid = left + (right-left)//2
 mid is calculated as above instead of (left+right)//2  - to prevent integer overflow ( not sure if this happens in python, but in c++ and Java)

 left+right might be an exteremely large value when the size of the array is huge.
 so, it's safer to subtract them and then add them


 #### Level order:

 it's better to use deque() instead of a list q=[] for the que in BFS, because deque.popleft() is faster than q.pop(0)